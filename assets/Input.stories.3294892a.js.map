{"version":3,"file":"Input.stories.3294892a.js","sources":["../../node_modules/nanoid/index.browser.js","../../src/components/Input/Input.vue"],"sourcesContent":["export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","<script setup>\nimport { ref, onMounted } from 'vue'\nimport { nanoid } from 'nanoid'\n\ndefineProps({\n  label: String,\n  size: {\n    type: String,\n    default: 'default',\n    validator(value) {\n      return ['default'].includes(value)\n    },\n  },\n})\n\nconst id = ref('')\nonMounted(() => {\n  id.value = nanoid()\n})\n</script>\n\n<template>\n  <div\n    class=\"b-input\"\n    :class=\"[`b-input--size-${size}`, { 'b-input--required': $attrs.required }]\"\n  >\n    <label :for=\"id\" class=\"b-input__label\" v-if=\"label || $slots.label\">\n      <slot name=\"label\">{{ label }}</slot>\n    </label>\n    <input :id=\"id\" class=\"b-input__element\" v-bind=\"$attrs\" />\n  </div>\n</template>\n\n<style lang=\"scss\">\n.b-input {\n  display: flex;\n  flex-direction: column;\n  gap: 0.25rem;\n\n  &__element {\n    padding-inline: var(--b-input-padding-inline);\n    padding-block: var(--b-input-padding-block);\n    border-radius: var(--b-input-border-radius, 4px);\n\n    border: 1px solid var(--b-input-border-color, #000);\n    font: inherit;\n  }\n\n  /* Required */\n  &--required {\n    .b-input__label {\n      &:after {\n        content: '*';\n        color: var(--b-color-negative, #af2929);\n        margin-left: 0.25rem;\n      }\n    }\n  }\n\n  /* Sizes */\n  &--size {\n    &-default {\n      --b-input-padding-block: 0.75rem;\n      --b-input-padding-inline: 1rem;\n    }\n  }\n}\n</style>\n"],"names":[],"mappings":"mHAmBO,GAAI,GAAS,CAAC,EAAO,KAC1B,OAAO,gBAAgB,GAAI,YAAW,CAAI,CAAC,EAAE,OAAO,CAAC,EAAI,IACvD,IAAQ,GACR,AAAI,EAAO,GACT,GAAM,EAAK,SAAS,EAAE,EACjB,AAAI,EAAO,GAChB,GAAO,GAAO,IAAI,SAAS,EAAE,EAAE,YAAa,EACvC,AAAI,EAAO,GAChB,GAAM,IAEN,GAAM,IAED,GACN,EAAE,4JCjBP,KAAA,GAAA,EAAA,EAAA,EACA,SAAA,IAAA,CACA,EAAA,MAAA,EAAA,CACA,CAAA;;;;;;;;;;;;;;;;;;;;;;;"}